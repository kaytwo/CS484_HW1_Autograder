#!/usr/bin/env bash


# Searches student code for a DIR_TO_COPY($1), and copies it to DESTINATION_JAVA_SRC($2)
# Called below
run_command () {
    COMMAND_TO_RUN=$1
    COMMAND_LABEL=$2
    COMMAND_TMP_FILE_NAME=$3
    RESULTS_FILE_NAME=$4
    MAXIMUM_POINTS=${5:-1}

    # Try to compile the maven project
    $COMMAND_TO_RUN | tee "/tmp/${COMMAND_TMP_FILE_NAME}.out"

    if [ ${PIPESTATUS[0]} -eq 0 ]
    then
        echo "[GS - Main Tests] ${COMMAND_LABEL} successful!"

        # Optionally output successful mvn compile message
        if [ "$CONFIG_OUTPUT_PASSING_SANITY_TESTS" = true ] ; then
            python3 "$PYTHON_JSON_TOOL" -m $MAXIMUM_POINTS -p -t "Step ${COMMAND_LABEL} successful"> "$OUTPUT_DIR"/"$RESULTS_FILE_NAME"
        fi
    else
        echo "[GS - Main Tests] ${COMMAND_LABEL} failed! Exiting..."
        python3 "$PYTHON_JSON_TOOL" -m $MAXIMUM_POINTS -t "Step ${COMMAND_LABEL} failed" -i "/tmp/${COMMAND_TMP_FILE_NAME}.out" > "$OUTPUT_DIR"/"$RESULTS_FILE_NAME"
    fi
}



# START: Sets correct directories based on local dev machine vs Gradescope production
if [ -f "/autograder/harness.py" ]; then
    echo "[GS] Running on Gradescope container, using Gradescope vars"
    DIR="/autograder/source"
    OUTPUT_DIR="/autograder/results"
    STUDENT_SUBMISSION_DIR="/autograder/submission"
else 
    echo "[GS] Running on local dev machine, using ./localautograder/ "
    DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
    OUTPUT_DIR="$DIR/localautograder/results"
    STUDENT_SUBMISSION_DIR="$DIR/localautograder/submission"
fi
PYTHON_JSON_TOOL="$DIR/tools/json_generator.py"
JEST_JSON_TOOL="$DIR/tools/jest_to_gradescope.py"

source "$DIR"/grading.config
# END: Sets correct directories based on local dev machine vs Gradescope production

###########################################################################################
#
#   Start testing the student code
#       - run mvn compile, write compiler output to results.json for student debugging
#       - if that succeeds, try compiling with tests (by running mvn test with no tests)
#
###########################################################################################

cd "$STUDENT_SUBMISSION_DIR"

rm -rf node_modules

run_command "npm install" "npm install" "npm_install" "results10.json" 0

run_command "npm run lint" "npm run lint" "npm_run_lint" "results_lint.json" 1

# run_command "npx react-scripts test --json --watchAll=false --outputFile jest-output.json" "Instructor tests" "instuctor_tests" "results11.json" 1

# $JEST_JSON_TOOL -i jest-output.json -o "$OUTPUT_DIR"/"results12.json"

